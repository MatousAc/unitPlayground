// generated by ChatGPT
export default class Range {
  constructor(start, end) {
    this.start = start
    this.end = end
  }

  get length() {
    return Math.abs(this.end - this.start)
  }

  includes(position) {
    return position >= this.start && position <= this.end
  }

  overlaps(other) {
    return this.includes(other.start) || other.includes(this.start)
  }

  replace(source, replacement) {
    return source.slice(0, this.start) + 
      replacement + source.slice(this.end)
  }
  
  insertStart(source, replacement) {
    return source.slice(0, this.start) + 
      replacement + source.slice(this.start)
  }

  insertEnd(source, replacement) {
    return source.slice(0, this.end) + 
      replacement + source.slice(this.end)
  }

  insertOnClosestSide(source, replacement, pos) {
    if (this.distance(this.start, pos) < this.distance(this.end, pos))
      return this.insertStart(source, replacement)
    else return this.insertEnd(source, replacement)
  }

  distance = (a, b) => Math.abs(a - b)
}
